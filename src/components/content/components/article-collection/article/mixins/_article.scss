@use "../../../../../../scss/mixins/text/" as textMixins;
@use "../../../../../../scss/abstracts/units/" as *;
@use "../../../../../../scss/abstracts/colours/" as colours;
@use "../../../../../../scss/abstracts/font/" as *;

@use "./base" as base;

// this is a scroller - we wouldn't need to modify width
// width and size can always be what we set it
// For the relevant screen size - it is not dynamically responsive
@mixin articleCardTopDown($maxWidth, $minWidth) {
	.article {
		@include base.article();
		flex-direction: column;

		max-width: $maxWidth;
		min-width: $minWidth;
		width: 100%;

		aspect-ratio: 16/18;

		.image {
			@include base.image($maxWidth, $minWidth);
			aspect-ratio: 16/9;
		}

		.contentContainer {
			@include base.contentContainer($maxWidth, $minWidth);
			// aspect ratio is applied after padding etc...
			aspect-ratio: 16/9;

			.textContainer {
				@include base.textContainer();
				gap: $spacingXxxs;

				.title,
				.description {
					margin: 0 0;
				}

				@container content-container (min-width: 20rem) {
					gap: $spacingXxs;
				}

				@container content-container (min-width: 24rem) {
					gap: $spacingXs;
				}
			}

			.meta {
				@include base.meta();
			}
		}
	}

	.template {
		max-width: $maxWidth;
		min-width: $minWidth;
		width: 100%;

		aspect-ratio: 16/18;
	}
}

// ///////////// BUG //////////////// //
// I think we need to actually apply a class
// to the content container of leftToRight
// I think that's the 'bleeding' css issue
// We are applying the correct styles
// Then potentially the incorrect
// Then fixing
/////////////////////////////////////////
@mixin articleCardLeftRight(
	$maxWidth: $contentWidthMd,
	$minWidth: $contentWidthMd
) {
	.article {
		@include base.article();

		aspect-ratio: 32/9;

		.image {
			@include base.image($maxWidth, $minWidth);
			aspect-ratio: 16/9;
		}

		.contentContainer {
			@include base.contentContainer($maxWidth, $minWidth);

			// aspect ratio is applied after padding etc...
			aspect-ratio: 16/9;

			.textContainer {
				@include base.textContainer();

				& {
					margin-top: 0;
					gap: 0;

					.title {
						margin-bottom: 0;
					}

					.title,
					.description {
						margin-left: $spacingXxs;
						margin-right: 0;
					}

					@container content-container (min-width: 16rem) {
						gap: $spacingXxs;

						.title,
						.description {
							margin-left: $spacingXs;
						}
					}

					@container content-container (min-width: 20rem) {
						gap: $spacingXs;

						.title,
						.description {
							margin-left: $spacingXs;
						}
					}

					@container content-container (min-width: 24rem) {
						gap: $spacingXs;

						.title,
						.description {
							margin-left: $spacingSm;
						}
					}
				}
			}

			.meta {
				@include base.meta();

				& {
					margin: 0;
					margin-left: $spacingXxs;
					margin-right: $spacingXxs;

					@container content-container (min-width: 16rem) {
						margin-left: $spacingXs;
					}

					@container content-container (min-width: 24rem) {
						margin-left: $spacingSm;
					}
				}
			}
		}
	}

	.template {
		max-width: $maxWidth;
		min-width: $minWidth;
		width: 100%;

		aspect-ratio: 32/9;
	}
}

@mixin articleCardListItem(
	$maxWidth: $contentWidthMd,
	$minWidth: $contentWidthMd,
	$aspectW: 16,
	$aspectH: 9
) {
	.article {
		@include base.article();

		.image {
			@include base.image($maxWidth, $minWidth);
			aspect-ratio: $aspectW "/" $aspectH;
		}

		.contentContainer {
			@include base.contentContainer(100%, 50%);

			.textContainer {
				@include base.textContainer();

				.title {
					@include textMixins.maxLines(1);
					font-size: clamp(1rem, 3cqi, 1.5rem);
				}

				.description {
					display: none;
					font-size: clamp(1rem, 3cqi, 1.2rem);
				}

				& {
					margin-top: 0;
					gap: 0;

					.title {
						margin-bottom: 0;
					}

					.title,
					.description {
						margin-left: $spacingXxs;
						margin-right: 0;
					}
				}
			}

			.meta {
				@include base.meta();
			}
		}
	}

	.template {
		width: 100%;
		// some height
	}
}
